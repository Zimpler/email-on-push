#! /usr/bin/python3

import os
import sys
import json
import smtplib
from email.mime.text import MIMEText
from datetime import datetime


def read_event():
    with open(os.environ['GITHUB_EVENT_PATH']) as event_file:
        event = json.load(event_file)
        return event


def build_subject(event):
    pushed_at = datetime.fromtimestamp(int(
        event['repository']['pushed_at'])).isoformat()
    data = {
        'org': event['repository']['organization'],
        'repo': event['repository']['name'],
        'pushed_at': pushed_at,
        'num_commits': len(event['commits']),
    }

    res = '{pushed_at} - {org}/{repo}: {num_commits} commits'.format(**data)

    return res


def include_commit(commit):
    message = commit['message']
    do_include = message.find('[push-email skip]') == -1 and message.find(
        '[skip push-email]') == -1
    return do_include


def build_body(event):
    data = {
        'org': event['repository']['organization'],
        'repo': event['repository']['name'],
        'compare': event['compare'],
    }

    opening = [
        'New commits have been pushed to {org}/{repo}'.format(**data),
        'Complete diff: {compare}'.format(**data),
    ]
    commits = [
        '- {}\n  {}'.format(c['message'].splitlines()[0], c['url'])
        for c in event['commits'] if include_commit(c)
    ]
    ending = ['From your friendly email-on-push action']

    if commits != []:
        return '\n\n'.join(opening + commits + ending)
    else:
        return None


def send_email(subject, contents):
    msg = MIMEText(contents)
    msg['Subject'] = subject
    msg['From'] = "Email-On-Push <{}>".format(os.environ['SMTP_USER'])
    msg['To'] = os.environ['TO']

    s = smtplib.SMTP(host='smtp.gmail.com', port=587)
    s.ehlo()
    s.starttls()
    s.login(os.environ['SMTP_USER'], os.environ['SMTP_PASSWORD'])
    s.send_message(msg=msg)
    s.close()


def main():
    event = read_event()
    body = build_body(event)
    if body:
        send_email(build_subject(event), body)
    sys.exit()


if __name__ == '__main__':
    main()
